-- This model dynamically can be used instead of the 'static partition' ga4__events model. There's no need to run both. 
-- With this incremetnal strategy, the most recent event_date is discovered. Events after that date are then incrementally added. 

--BigQuery does not cache wildcard queries that scan across sharded tables which means it's best to materialize the raw event data as a partitioned table so that future queries benefit from caching
{{
    config(
        materialized = 'incremental',
        incremental_strategy = 'insert_overwrite',
        partition_by={
        "field": "event_date_dt",
        "data_type": "date",
        }
    )
}}

with source as (
    select 
        *
    from {{ source('ga4', 'events') }}
    where cast(_table_suffix as int64) >= {{var('start_date')}}
    {% if is_incremental() %}
        -- Incrementally add new events. Filters on _TABLE_SUFFIX using the max event_date_dt value found
        -- See https://docs.getdbt.com/reference/resource-configs/bigquery-configs#the-insert_overwrite-strategy
        and parse_date('%Y%m%d',_TABLE_SUFFIX) >= _dbt_max_partition 
    {% endif %}
),
renamed as (
    select 
        parse_date('%Y%m%d',event_date) as event_date_dt,
        event_timestamp,
        event_name,
        event_params,
        event_previous_timestamp,
        event_value_in_usd,
        event_bundle_sequence_id,
        event_server_timestamp_offset,
        user_id,
        user_pseudo_id as client_id,
        privacy_info,
        user_properties,
        user_first_touch_timestamp,
        user_ltv,
        device,
        geo,
        app_info,
        traffic_source,
        stream_id,
        platform,
        --event_dimensions, -- This is present in the sample dataset, but not the GA4 BQ export spec https://support.google.com/firebase/answer/7029846?hl=en
        ecommerce,
        items
    from source
)

select * from renamed
